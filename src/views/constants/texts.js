export const basics_header_text = "Todo mundo começa de um lugar. Essa é a base de todo programador, escolhemos dividir ela em duas sessões: Matemática e Programação."
export const basics_card_1 = "A base matemática envolve você conhecer alguns conceitos de geometria e álgebra, essenciais para áreas gráficas da computação, onde geralmente sua tela é um mundo 2 ou 3d, e você deve inserir objetos, assim como fazer transformações neles. Há também um escopo de cálculo, que dará suporte para entender física, que é, no fim, a base da programação: sinais elétricos passando por componentes que serão estudados. Por fim existe todo um módulo de álgebra booleana, que envolve aprender matemática com apenas dois algarismos, invés de 10, a álgebre booleana. Isso é essencial para entender lógica e como funcionam as máquinas."
export const basics_card_2 = "Você deve pegar alguma familiridade com como a maioria do código é escrito hoje em dia. Pseudocódigo ou só ver pessoas programando, ter uma noção do que realmente significa programar, é uma boa ideia. Reunir algum conhecimento de livros é bem importante também, mas não se prenda à somente uma metodologia, tente ler Programming Pearls, de Jon Bentley. Não se preocupe se não tiver entendendo muita coisa."

export const yfpl_header_text = "É hora de colocar a mão na massa. Você já deve entender oque é uma linguagem de programação, pelo menos de maneira abstrata. É hora de escolher por qual vocẽ vai começar:"
export const yfpl_card_python = "Python é ótima primeira opção, ela é quente, fácil de ler e de aprender. É uma linguagem de script, mas tem suporte à orientação à objetos, que é o paradigma mais usado atualmente. Grandes escolas do mundo usam Python no curso introdutório, e ela está sendo cada vez mais usada em sistemas reais."
export const yfpl_card_java = "Java é a linguagem mais usada no mundo, por um motivo. A forma com que a linguagem construiu seu suporte à orientação a objetos dominou o mundo moderno da engenharia de software. Hoje ela está cada dia se modernizando mais para se adequar à novos paradigmas, e não está perdendo tanto o gás."
export const yfpl_card_javascript = "Javascript está em todo lugar, linguagem que estava só na Web até pouco tempo atrás, recentemente virou uma linguagem livre para o programador o suficiente para que pessoas desenvolvessem diversos programas em cima e extendessem as funcionalides da linguagem para diversos níveis e tópicos. Não é uma linguagem muito exata ou bem construída porém, e por isso é tão livre."
export const yfpl_card_c = "C é, das linguagens antigas, a mais nova, e ainda muito usada. Recomendamos aprender ela se você quiser uma base que não siga os padrões da maioria e quer manjar mais sobre hardware, com mais detalhes sobre componentes que você terá que mexer."
export const yfpl_card_others = "E existem várias outras linguagens que são vistas hoje em dia como boas para começar: Ruby, C++, Perl, Go. Não pensem muito em escolher, essa primeira experiência é muito mais importante que você se empolgue e goste de como estar fazendo, não tenha medo de perder tempo aprendendo o começo de várias até ver uma que você goste mais. Pesquise quais linguagens empresas tech que você gosta usam e use disso pra passar dos obstáculos iniciais(que serão muitos)"

export const alg_header_text = "Esse é tópico mais avançado do módulo básico. É aqui onde as ferramentas que você construiu e desenvolveu vão ser usadas para montar algo realmente complexo. É aqui onde coisas realmente complicadas, que são difícies de entender como funcionam, aparecem. Basicamente algoritmos são programas prontos que pessoas fizeram que resolvem problemas comuns da computação. Hoje esses problemas estão resolvidos e estamos trabalhando em um nível de complexidade acima desse, mas ainda assim é importante você compreender como esses programas funcionam, para usar eles. Da mesma forma que estudamos produtos notáveis em matemática, esse módulo seria como programas notáveis. Existe alguma divisão entre esses algoritmos, e vamos tentar te situar melhor nelas."
export const alg_card_sorts = "O tipo de algoritmo mais famoso são os de sort, ou ordenação. Ordernar coisas é, incrivelmente uma das implementações mais importantes na programação, e devido a isso, existem diversos algoritmos de ordenação já feitos que tem um nome e você deveria aprender. Provavelmente você já pensou e fez um ou outro."
export const alg_card_data_structures = "Estruturas de dados são algoritmos que funcionam para modelar dados, ou seja, variáveis ou valores do mundo real, de uma forma que é mais fácil fazer uma coisa ou outra com esses dados. Por exemplo, de que forma você deve modelar dados de telefone para que fique mais fácil identificar pelos 3 primeiros dígitos?"
export const alg_card_path = "Encontrar caminhos são sempre um problema da humanidade. Algoritmos para encontrar caminhos são dos mais famosos também, envolvendo algumas estruturas de dados como árvores e grafos. Achar o caminho mais curto, mais longo ou menos custoso são algoritmos que você vai ver."
export const alg_card_greedy = "Algoritmos gulosos estão aqui para exemplificar um tipo que nem sempre é exato. Algoritmos são programas para resolver problemas, mas nem todo problema é resolvível em tempo hábil, e talvez o melhor que você tenha seja uma solução boa, e não perfeita. Alguns algoritmos gulosos funcionam com enxergar soluções perto, e não necessariamente a melhor."
export const alg_card_others = "Existem diversos outros tipos de algoritmos prontos que são úteis. Alguns deles são usados em várias áreas da computação, outros são mais nichados. Existem algumas leituras clássicas que te ensinam bastante, como o Algorithms and Data Structures de Thoman H. Cornen, entre outros autores. Quanto mais conhecimento nessa área, mais ferramentas você terá como um programador."

export const infras_header_text = "É hora de aprender um pouco mais sobre o mundo real, como as ferramentas que você aprendeu até agora funcionam. As infras visam te mostrar um tanto do por baixo dos panos de um sistema operacional, de um computador, e em geral de programas que usamos todos os dias, enquanto você ainda vê na prática vários dos algoritmos que você aprendeu."
export const infras_card_sw = "Infraestrutura de software é aprender sobre como um algoritmo que você roda, realmente chega ao processador e funciona do jeito que funciona, principalmente em relação aos sistemas operacionais. Isso é extremamente importante para diversas áreas que presam por conhecimentos de sistemas, hoje em dia bem comuns."
export const infras_card_hw = "Infraestrutura de hardware é melhor para quem gosta de entender em baixíssimo nível como pulsos elétricos foram desenvolvidos ao longo dos anos para formar oque vemos hoje como computadores. É extremamete interessante para o curioso, mas realmente mais importante para quem for seguir áreas específicas."
export const infras_card_com = "Comunicação, ou redes, é um dos tópicos mais quentes do momento. A comunicação entre sistemas é basicamente como o mundo funciona atualmente, e não dá pra fazer o suficiente o quanto é importante conhecer bem esse assunto."

export const data_header_text = "O mundo hoje é baseado em dados, com tópicos como big data, machine learning e IA estando cada vez mais quentes. Saber como lidar, armazenar e interpretar dados é uma obrigatoriedade e pode ser bastante confuso entender as diversas formas de armazenamento possíveis. Vamos dividir alguns tópicos do meio abaixo:"  
export const data_card_BD = "Bancos de dados são como chamamos as abstrações dos locais onde dados são armazenados. Nesses lugares, há diversas formas de guardar os dados para que possamos achar eles rapidamente depois. A forma mais presente e clássica é a relacional, mas recentemente vem surgindo diversas novas estratégias para armazenar dados, os banco não relacionais."
export const data_card_DS = "Ciência de dados é o estudo da interpretação e apresentação de dados para que seja possível tirar conclusões deles. É extremamente importante hoje em dia com o grande volume de dados que existe."
export const data_card_alg = "Alguns algoritmos que estão dentro do escopo de dados são importantes de aprender, ou pelo menos saber que existem. Algoritmos de geração de dados, como interpolação, ou remoção de dados lixo são muito importantes."

export const mpl_header_text = "Está na hora de aprender uma outra linguagem de programação a fundo, e de preferência começar a entender outros paradigmas da programação, ou seja, outros modos com que a linguagem pode ser usada para mandar instruções para um computador. O conhecimento de vários paradigmas é essencial para ter mais maneiras de visualizar, definir e resolver um problema, ainda mais nos dias de hoje que as linguagems estão suportando vários. Vale ressaltar que as linguagens não possuem apenas um paradigma, chamamos de puras as linguagens que se afiliam majoritariamente ou unicamente, mas são poucas."
export const mpl_card_func = "O paradigma funcional é geralmente o segundo que os programadores enfrentam, ainda mais hoje que existem linguagens mainstream que seguem várias regras do paradigma funcional. É extremamente interessante e útil em diversas aplicações, e você provavelmente vai ver código em produção de diversas empresas usando o paradigma funcional. Linguagens como Haskell, Lisp e Clojure são funcionais pura, mas até Java hoje já suporta o paradigma."
export const mpl_card_oo = "A orientação a objetos é o conhecido de todos, mas é sempre bom reforçar seus conceitos e motivos de por que se tornou uma febre mundial e até hoje é a mais predominante. Esse paradigma é sobre herança, reuso e abstrações do mundo real. Java, C#, .NET, Objective-C são exemplos de linguagens com bastante suporte a orientação a objetos."
export const mpl_card_imp = "As linguagens imperativas são geralmente mais antigas, quando a abstração de conceitos do mundo real ainda não estava muito em voga e o foco das linguagens eram mandar instruções apenas, sem muito foco na estruturação do código. É um paradigma de linguagem simples e que funciona bem até hoje, apesar de ter seus defeitos de engenharia de software. C e FORTRAN são bons exemplos de linguagens com foco na programação imperativa."

export const teoria_header_text = "A teoria da computação é sobre entender como o sistema que você aprendeu a usar funciona, como foram criados os raciocínios que levaram à criação do computador moderno. Apesar de não ser extremamente prático, esse conhecimento pode te levar à interpretar suas ferramentas de uma forma diferente e assim saber ultilizas de forams mais criativas, além de ser importante por si só."
export const teoria_card_teorica = "Esse é o campo que estuda de fato as raízes da programação como conhecemos. Pode não interessar para uma gama de pessoas, mas aprender sobre máquinas de estados e desenvolver o pensamento algoritmíco que estudar isso te força a ter é algo extremamente valioso."
export const teoria_card_analise = "O cálculo de quão rápido algoritmos rodam é algo feito quando eles são estudados, mas ter uma bagagem teórica te permite estudar as classes de velocidade dos algoritmos, aprofundar muito mais no assunto e entender que nem todos os problemas são resolvíveis com algoritmos, e outros não possíveis em tempo hábil. Ou são?"

export const ess_header_text = "A partir daqui estamos entendendo como construir aplicações grandes, organiza-las e mantê-las para prosperidade. As ferramentas já estão todas na são mão, agora veremos o estudo de como usar elas da melhor forma para construir um sistema. A engenharia de software é composta de uma série de recomendações, guias e modelos de como bons sistemas são construídos. Existem diversas áreas na engenharia de software e vamos citar apenas algumas aqui, as mais essenciais."
export const ess_card_const = "A construção de bons softwares é uma das maiores preocupações da engenharia de software. Bom aqui significa limpo, estável, . Existem ferramentas aqui que são essenciais para um bom programador, como os padrões de projeto: formas de montar um sistema de forma a resolver problemas comuns que aquele tipo de sistema pode apresentar. Estudar os padrões de projeto mais famosos é extremamente importante e você provavelmente vai encontrar com eles(e já encontrou) sem nem saber."
export const ess_card_test = "Parte de garantir um bom software é testa-lo, e existe diversos estudos e literatura sobre construções de bons testes, existendo categorias difernetes que testam diferentes módulos de um sistema, e é bastante improvável que empresas não tenham diversas suites de testes em seu código, tornando obrigatório um programador saber sobre isso. Hoje com métodos como o Test-driven development cada vez mais comuns, só aumenta a importância dos testes."
export const ess_card_legacy = "Código legado é um grande problema da computação, e está longe de deixar de ser. Programas escritos há muito tempo que ainda precisam de manutenção, e também ter a noção de que o código que está sendo escrito hoje será legado um dia fazem com que essa área seja de extrema importância e sensibilidade. Existem ferramentas e recomendações sobre como lidar com esse tipo de sistemas e é essencial estudar pelo menos um pouco sobre."

export const area_card_text = ""

export const graphics_header_text = "As áreas gráficas da computação envolvem bastante matemática e geometria, e entre elas está um dos campos que mais atrai jovens para a computação: Jogos. Temas como realidade virtual também estão quentes na área atualmente, mas sempre vai existir o lado puro do processamento de dados para formar imagens. Temas práticos como previsão climática, ou até a recente primeira visualização de um buraco negro envolvem essa área"
export const graphics_hader_games_text = ""
export const graphics_card_2dgames = ""
export const graphics_card_3dgames = ""
export const graphics_header_RARV_text = ""
export const graphics_card_RA = ""
export const graphics_card_RV = ""

export const design_header_text = ""
export const design_header_uxui_text = ""
export const design_card_ux = ""
export const design_card_ui = ""
export const design_card_universal_principles = ""
export const design_card_design_thinking = ""
export const design_card_agile = ""

